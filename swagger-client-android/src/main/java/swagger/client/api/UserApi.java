/**
 * 同城家教 API
 * 同城家教 接口文档, V1.0
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import swagger.client.model.ChangePasswordRequest;
import swagger.client.model.CheckVarcodeRequest;
import swagger.client.model.GetPhoneVarcodeRequest;
import swagger.client.model.LoginRequest;
import swagger.client.model.RegisterRequest;
import swagger.client.model.RetrievePasswordRequest;
import swagger.client.model.ServerResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class UserApi {
  String basePath = "http://andrew.tcjj.net/Api/Main";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 修改密码
  * 修改密码
   * @param changePassword 修改密码
   * @return ServerResponse
  */
  public ServerResponse changePassword (ChangePasswordRequest changePassword) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = changePassword;
    // verify the required parameter 'changePassword' is set
    if (changePassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'changePassword' when calling changePassword",
        new ApiException(400, "Missing the required parameter 'changePassword' when calling changePassword"));
    }

    // create path and map variables
    String path = "/changePassword";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServerResponse) ApiInvoker.deserialize(localVarResponse, "", ServerResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 修改密码
   * 修改密码
   * @param changePassword 修改密码
  */
  public void changePassword (ChangePasswordRequest changePassword, final Response.Listener<ServerResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = changePassword;

    // verify the required parameter 'changePassword' is set
    if (changePassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'changePassword' when calling changePassword",
        new ApiException(400, "Missing the required parameter 'changePassword' when calling changePassword"));
    }

    // create path and map variables
    String path = "/changePassword".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServerResponse) ApiInvoker.deserialize(localVarResponse,  "", ServerResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 验证码校验
  * 判断用户输入的验证码是否正确
   * @param checkVarcode 判断用户输入的验证码是否正确
   * @return ServerResponse
  */
  public ServerResponse checkVarcode (CheckVarcodeRequest checkVarcode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = checkVarcode;
    // verify the required parameter 'checkVarcode' is set
    if (checkVarcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkVarcode' when calling checkVarcode",
        new ApiException(400, "Missing the required parameter 'checkVarcode' when calling checkVarcode"));
    }

    // create path and map variables
    String path = "/checkVarcode";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServerResponse) ApiInvoker.deserialize(localVarResponse, "", ServerResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 验证码校验
   * 判断用户输入的验证码是否正确
   * @param checkVarcode 判断用户输入的验证码是否正确
  */
  public void checkVarcode (CheckVarcodeRequest checkVarcode, final Response.Listener<ServerResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = checkVarcode;

    // verify the required parameter 'checkVarcode' is set
    if (checkVarcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'checkVarcode' when calling checkVarcode",
        new ApiException(400, "Missing the required parameter 'checkVarcode' when calling checkVarcode"));
    }

    // create path and map variables
    String path = "/checkVarcode".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServerResponse) ApiInvoker.deserialize(localVarResponse,  "", ServerResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取验证码
  * 获取验证码
   * @param getPhoneVarcode 获取验证码
   * @return ServerResponse
  */
  public ServerResponse getPhoneVarcode (GetPhoneVarcodeRequest getPhoneVarcode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = getPhoneVarcode;
    // verify the required parameter 'getPhoneVarcode' is set
    if (getPhoneVarcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'getPhoneVarcode' when calling getPhoneVarcode",
        new ApiException(400, "Missing the required parameter 'getPhoneVarcode' when calling getPhoneVarcode"));
    }

    // create path and map variables
    String path = "/getPhoneVarcode";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServerResponse) ApiInvoker.deserialize(localVarResponse, "", ServerResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 获取验证码
   * 获取验证码
   * @param getPhoneVarcode 获取验证码
  */
  public void getPhoneVarcode (GetPhoneVarcodeRequest getPhoneVarcode, final Response.Listener<ServerResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = getPhoneVarcode;

    // verify the required parameter 'getPhoneVarcode' is set
    if (getPhoneVarcode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'getPhoneVarcode' when calling getPhoneVarcode",
        new ApiException(400, "Missing the required parameter 'getPhoneVarcode' when calling getPhoneVarcode"));
    }

    // create path and map variables
    String path = "/getPhoneVarcode".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServerResponse) ApiInvoker.deserialize(localVarResponse,  "", ServerResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户登录操作
  * 登录
   * @param login 登录
   * @return ServerResponse
  */
  public ServerResponse login (LoginRequest login) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = login;
    // verify the required parameter 'login' is set
    if (login == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'login' when calling login",
        new ApiException(400, "Missing the required parameter 'login' when calling login"));
    }

    // create path and map variables
    String path = "/login";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServerResponse) ApiInvoker.deserialize(localVarResponse, "", ServerResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 用户登录操作
   * 登录
   * @param login 登录
  */
  public void login (LoginRequest login, final Response.Listener<ServerResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = login;

    // verify the required parameter 'login' is set
    if (login == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'login' when calling login",
        new ApiException(400, "Missing the required parameter 'login' when calling login"));
    }

    // create path and map variables
    String path = "/login".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServerResponse) ApiInvoker.deserialize(localVarResponse,  "", ServerResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户注册操作
  * 注册
   * @param register 注册
   * @return ServerResponse
  */
  public ServerResponse register (RegisterRequest register) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = register;
    // verify the required parameter 'register' is set
    if (register == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'register' when calling register",
        new ApiException(400, "Missing the required parameter 'register' when calling register"));
    }

    // create path and map variables
    String path = "/register";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServerResponse) ApiInvoker.deserialize(localVarResponse, "", ServerResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 用户注册操作
   * 注册
   * @param register 注册
  */
  public void register (RegisterRequest register, final Response.Listener<ServerResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = register;

    // verify the required parameter 'register' is set
    if (register == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'register' when calling register",
        new ApiException(400, "Missing the required parameter 'register' when calling register"));
    }

    // create path and map variables
    String path = "/register".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServerResponse) ApiInvoker.deserialize(localVarResponse,  "", ServerResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 重置密码
  * 忘记密码，进行重置
   * @param retrievePassword 重置密码
   * @return ServerResponse
  */
  public ServerResponse retrievePassword (RetrievePasswordRequest retrievePassword) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = retrievePassword;
    // verify the required parameter 'retrievePassword' is set
    if (retrievePassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'retrievePassword' when calling retrievePassword",
        new ApiException(400, "Missing the required parameter 'retrievePassword' when calling retrievePassword"));
    }

    // create path and map variables
    String path = "/retrievePassword";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ServerResponse) ApiInvoker.deserialize(localVarResponse, "", ServerResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 重置密码
   * 忘记密码，进行重置
   * @param retrievePassword 重置密码
  */
  public void retrievePassword (RetrievePasswordRequest retrievePassword, final Response.Listener<ServerResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = retrievePassword;

    // verify the required parameter 'retrievePassword' is set
    if (retrievePassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'retrievePassword' when calling retrievePassword",
        new ApiException(400, "Missing the required parameter 'retrievePassword' when calling retrievePassword"));
    }

    // create path and map variables
    String path = "/retrievePassword".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ServerResponse) ApiInvoker.deserialize(localVarResponse,  "", ServerResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
